{"version":3,"sources":["math-utils.js","StarsDisplay.js","PlayNumber.js","PlayAgain.js","Game.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarsDisplay","props","count","map","starId","key","className","colors","available","used","wrong","candidate","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","StarMatch","gameId","setGameId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f569f162.chunk.js","sourcesContent":["// Math science\nconst utils = {\n    // Sum an array\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n        const sets = [[]];\n        const sums = [];\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = 0, len = sets.length; j < len; j++) {\n                const candidateSet = sets[j].concat(arr[i]);\n                const candidateSum = utils.sum(candidateSet);\n                if (candidateSum <= max) {\n                    sets.push(candidateSet);\n                    sums.push(candidateSum);\n                }\n            }\n        }\n        return sums[utils.random(0, sums.length - 1)];\n    },\n};\n\nexport default utils;","import React from 'react';\nimport utils from './math-utils';\n\nconst StarsDisplay = props => (\n    <>\n        {utils.range(1, props.count).map(starId =>\n            <div key={starId} className=\"star\" />\n        )}\n    </>\n)\nexport default StarsDisplay;","import React from 'react';\n\n// Color Theme\nconst colors = {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue',\n};\n\nconst PlayNumber = props => (\n    <button\n        className=\"number\"\n        style={{ backgroundColor: colors[props.status] }}\n        onClick={() => props.onClick(props.number, props.status)}\n    >\n        {props.number}\n    </button>\n)\nexport default PlayNumber;","import React from 'react';\n\nconst PlayAgain = props => (\n    <div className=\"game-done\">\n        <div\n            className=\"message\"\n            style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\n        >\n            {props.gameStatus === 'lost' ? 'Game over' : 'Nice!'}\n        </div>\n        <button onClick={props.onClick}>Play Again</button>\n    </div>\n)\n\nexport default PlayAgain;","import React, { useState, useEffect } from 'react';\nimport utils from './math-utils';\nimport StarsDisplay from './StarsDisplay';\nimport PlayNumber from './PlayNumber';\nimport PlayAgain from './PlayAgain';\n\n// custom hook to manage state\nconst useGameState = () => {\n    // initial state\n    const [stars, setStars] = useState(utils.random(1, 9));\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n    const [candidateNums, setCandidateNums] = useState([]);\n    const [secondsLeft, setSecondsLeft] = useState(10);\n\n    useEffect(() => {\n        if (secondsLeft > 0 && availableNums.length > 0) {\n            const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\n            // always clean side effect aftre it's done rendering\n            return () => clearTimeout(timerId);\n        }\n    });\n    // transact on state\n    const setGameState = (newCandidateNums) => {\n        if (utils.sum(newCandidateNums) !== stars) {\n            setCandidateNums(newCandidateNums);\n        } else {\n            const newAvailableNums = availableNums.filter(\n                n => !newCandidateNums.includes(n)\n            );\n            // redraw stars\n            setStars(utils.randomSumIn(newAvailableNums, 9));\n            setAvailableNums(newAvailableNums);\n            setCandidateNums([]);\n        }\n    };\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\n};\n\nconst Game = (props) => {\n    const {\n        stars,\n        availableNums,\n        candidateNums,\n        secondsLeft,\n        setGameState\n    } = useGameState();\n\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\n    const gameStatus = availableNums.length === 0\n        ? 'won'\n        : secondsLeft === 0 ? 'lost' : 'active';\n    const gameIsDone = availableNums.length === 0;\n    // const resetGame = () => {\n    //   setStars(utils.random(1,9));\n    //   setAvailableNums(utils.range(1,9));\n    //   setCandidateNums([]);\n    // }\n    const numberStatus = number => {\n        if (!availableNums.includes(number)) {\n            return 'used';\n        }\n        if (candidateNums.includes(number)) {\n            return candidatesAreWrong ? 'wrong' : 'candidate';\n        }\n        return 'available';\n    }\n    const onNumberClick = (number, currentStatus) => {\n        if (gameStatus !== 'active' || currentStatus == 'used') {\n            return;\n        }\n        // candidateNums\n        const newCandidateNums =\n            currentStatus === 'available'\n                // add to candidates array\n                ? candidateNums.concat(number)\n                // filter out the nubmer that was clicked\n                : candidateNums.filter(cn => cn !== number)\n        setGameState(newCandidateNums);\n    }\n    return (\n        <div className=\"game\">\n            <div className=\"help\">\n                Pick 1 or more numbers that sum to the number of stars\n        </div>\n            <div className=\"body\">\n                <div className=\"left\">\n                    {gameStatus !== 'active' ? (\n                        <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\n                    ) : (\n                            <StarsDisplay count={stars} />\n                        )}\n                </div>\n                <div className=\"right\">\n                    {utils.range(1, 9).map(number =>\n                        <PlayNumber\n                            key={number}\n                            status={numberStatus(number)}\n                            number={number}\n                            onClick={onNumberClick}\n                        />\n                    )}\n                </div>\n            </div>\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n        </div>\n    );\n};\n\nexport default Game;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  // unmount the previous game, clear side effects and mount a new game\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\n}\n\nReactDOM.render(<StarMatch />, document.getElementById('root'));\n\n"],"sourceRoot":""}